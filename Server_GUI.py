# Form implementation generated from reading ui file 'XuanNiaoTR.ui'
#
# Created by: PyQt6 UI code generator 6.0.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import Connect
import DropEdit
from PyQt6.QtCore import Qt
from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import QMainWindow
from QEditDropHandler import QEditDropHandler


class Ui_XuanNiaoTR(QMainWindow):

    def __init__(self):
        super(Ui_XuanNiaoTR, self).__init__()

        self.input_stream = None
        self.XuanNiaoTR = None
        self.button_send = None
        self.frame_bottom = None
        self.s_entry = None
        self.checkBox_connect = None
        self.lineEdit_port = None
        self.label_port = None
        self.lineEdit_ipv4 = None
        self.label_ipv4 = None
        self.frame_medium = None
        self.ChartBrowser = None
        self.frame_chart = None

        self.Server_ipv4 = Connect.get_host_auto()
        self.receive_str = None
        self.send_str = None
        self.ip = None

        # self.contact()
        # Ui_XuanNiaoTR.setWindowFlag(self, Qt.WindowType.FramelessWindowHint)  # 隐藏边框
        # Ui_XuanNiaoTR.setWindowOpacity(0.9)  # 设置窗口透明度
        # Ui_XuanNiaoTR.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        #
        # pe = QPalette()
        # Ui_XuanNiaoTR.setAutoFillBackground(True)
        # pe.setColor(QPalette.Window, Qt.lightGray)  # 设置背景色
        # pe.setColor(QPalette.Background, Qt.blue)
        # Ui_XuanNiaoTR.setPalette(pe)

    def setupUi(self, XuanNiaoTR):
        XuanNiaoTR.setObjectName("XuanNiaoTR")
        # XuanNiaoTR.setEnabled(True)
        XuanNiaoTR.resize(400, 535)
        # XuanNiaoTR.setSizeGripEnabled(False)
        # XuanNiaoTR.setModal(False)

        self.frame_chart = QtWidgets.QFrame(XuanNiaoTR)
        self.frame_chart.setGeometry(QtCore.QRect(0, 0, 400, 535))
        self.frame_chart.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_chart.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_chart.setObjectName("frame_chart")
        # 聊天收发文本显示
        self.ChartBrowser = QtWidgets.QTextBrowser(self.frame_chart)
        self.ChartBrowser.setGeometry(QtCore.QRect(0, 0, 400, 330))
        self.ChartBrowser.setObjectName("ChartBrowser")
        self.ChartBrowser.append(self.receive_str)
        # 中部框体
        self.frame_medium = QtWidgets.QFrame(self.frame_chart)
        self.frame_medium.setGeometry(QtCore.QRect(0, 329, 400, 40))
        self.frame_medium.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_medium.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_medium.setObjectName("frame_medium")
        # 电脑端ipv4地址 端口号 是否开启连接
        self.label_ipv4 = QtWidgets.QLabel(self.frame_medium)
        self.label_ipv4.setGeometry(QtCore.QRect(0, 10, 71, 21))
        self.label_ipv4.setObjectName("label_ipv4")

        self.lineEdit_ipv4 = QtWidgets.QLineEdit(self.frame_medium)
        self.lineEdit_ipv4.setGeometry(QtCore.QRect(70, 10, 100, 21))
        self.lineEdit_ipv4.setText(self.Server_ipv4)
        self.lineEdit_ipv4.setFrame(True)
        self.lineEdit_ipv4.setReadOnly(True)
        self.lineEdit_ipv4.setObjectName("lineEdit_ipv4")
        # ipv4 = self.lineEdit_port.text()
        # self.Server_ipv4 = int(ipv4)

        self.label_port = QtWidgets.QLabel(self.frame_medium)
        self.label_port.setGeometry(QtCore.QRect(180, 10, 71, 21))
        self.label_port.setObjectName("label_port")

        self.lineEdit_port = DropEdit.DropEdit(self.frame_medium)
        self.lineEdit_port.setGeometry(QtCore.QRect(250, 10, 50, 21))
        self.lineEdit_port.setInputMask("9999")
        self.lineEdit_port.setText("9999")
        self.lineEdit_port.setObjectName("lineEdit_port")
        port = self.lineEdit_port.text()
        self.Server_port = int(port)

        self.checkBox_connect = QtWidgets.QCheckBox(self.frame_medium)
        self.checkBox_connect.setGeometry(QtCore.QRect(330, 10, 71, 21))
        self.checkBox_connect.setChecked(True)
        self.checkBox_connect.setObjectName("checkBox_connect")
        self.checkBox_connect.stateChanged.connect(Connect.check_connect)
        # 聊天输入框
        self.s_entry = QtWidgets.QLineEdit(self.frame_chart)
        self.s_entry.setGeometry(QtCore.QRect(0, 370, 401, 141))
        # self.s_entry.setText("这里是电脑端")
        self.s_entry.setAcceptDrops(True)  # 支持拖入操作
        self.s_entry.setDragEnabled(True)  # 支持拽出操作
        self.s_entry.setObjectName("s_entry")
        self.s_entry.returnPressed.connect(Connect.sending)
        self.s_entry.returnPressed.connect(self.dragEnterEvent)
        self.s_entry.installEventFilter(QEditDropHandler(self))
        # 底部框体
        self.frame_bottom = QtWidgets.QFrame(self.frame_chart)
        self.frame_bottom.setGeometry(QtCore.QRect(0, 510, 401, 31))
        self.frame_bottom.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_bottom.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_bottom.setObjectName("frame_bottom")

        self.button_send = QtWidgets.QPushButton(self.frame_bottom)
        self.button_send.setGeometry(QtCore.QRect(300, 0, 75, 24))
        self.button_send.setObjectName("button_send")
        self.button_send.clicked.connect(Connect.sending)

        self.setAcceptDrops(True)  # 支持拖入操作
        Connect.connecting(self)
        self.retranslateUi(XuanNiaoTR)
        self.lineEdit_ipv4.editingFinished.connect(self.lineEdit_ipv4.update)
        self.button_send.clicked.connect(self.s_entry.update)
        QtCore.QMetaObject.connectSlotsByName(XuanNiaoTR)
        print("主界面创建完成")

    def retranslateUi(self, XuanNiaoTR):
        _translate = QtCore.QCoreApplication.translate
        XuanNiaoTR.setWindowTitle(_translate("XuanNiaoTR", "Dialog"))
        self.label_ipv4.setText(_translate("XuanNiaoTR", "电脑端ipv4:"))
        self.label_port.setText(_translate("XuanNiaoTR", "电脑端口号:"))
        self.checkBox_connect.setText(_translate("XuanNiaoTR", "连接状态"))
        self.button_send.setText(_translate("XuanNiaoTR", "发送"))

    # def dragEnterEvent(self, event):
    #     file = event.mimeData().urls()[0].toLocalFile()
    #     if file not in self.paths:  # ==> 去重显示
    #         self.paths += file + "\n"
    #         print("拖拽的文件 ==> {}".format(file))
    #         self.s_entry.append(self.paths)
